# This is a basic workflow to help you get started with Actions
name: GNU-IceCat

# Controls when the workflow will run
# Allows you to run this workflow manually from the Actions tab
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      job:
        description: 'Job to run.'
        required: true
        default: 'Build_Windows'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "WindowsX64"
  Make_IceCat:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: Clone GNU IceCat
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        run: git clone https://git.savannah.gnu.org/git/gnuzilla.git
        
      - name: Make GNU IceCat
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        run: |
          cd gnuzilla && \
          sed -i -e '/brand.dtd/s/^/#/' -e '/brand.ftl/s/^/#/' makeicecat && \
          sed -i '/ding Firefox tarball$/{n;s/^[[:blank:]]\+wget/& --progress=bar:force:noscroll/;}' makeicecat
          ./makeicecat
          
      - uses: actions/upload-artifact@v3
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        with:
          name: IceOutput
          path: gnuzilla/output/icecat-*.tar.bz2
          
  Build_Windows:
    runs-on: ubuntu-latest
    needs: Make_IceCat
    steps:
      - name: Clone GNU IceCat
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        run: git clone https://git.savannah.gnu.org/git/gnuzilla.git
        
      - name: Download artifact
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: ""
          name: IceOutput
          path: gnuzilla/output/
          search_artifacts: true
          if_no_artifact_found: warn
          
      #- name: Download a single artifact
      #  uses: actions/download-artifact@v3
      #  with:
      #    name: IceOutput

      # Runs a set of commands using the runners shell
      - name: Prepare Windows build script
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        run: |
          tar -xf gnuzilla/output/icecat-*.tar.bz2 -C gnuzilla/output/
          cd $(ls -d gnuzilla/output/icecat-*|head -1)
          sed -i -e 's/^apt-get/sudo apt-get/' -e '/^sudo apt-get/s/--force-yes  //' ../../data/buildscripts/build-windows.sh && \
          chmod u+x ../../data/buildscripts/build-windows.sh && \
          sudo apt-get -y install mingw-w64-tools llvm wine-binfmt \
          mingw-w64-x86-64-dev g++-mingw-w64-x86-64-posix \
          libgcc-12-dev-amd64-cross nasm alsa-base && \
          sudo ln -s /usr/bin/lld-link-14 /usr/bin/lld-link
          sudo ln -s /usr/lib/gcc/x86_64-w64-mingw32/10-posix/include/c++ /usr/x86_64-w64-mingw32/include/c++
          rustup target add x86_64-pc-windows-gnu
          /usr/bin/clang++ -target x86_64-w64-mingw32 -v
          clang -target x86_64-w64-mingw32 -v -c -xc++ /dev/null
          sed -i 's/i686-w64-mingw32/x86_64-pc-windows-gnu/' ../../data/buildscripts/mozconfig-windows
          cat << EOF > ../../data/buildscripts/mozconfig-windows
          ac_add_options --with-toolchain-prefix=x86_64-w64-mingw32-
          CXXFLAGS="-fms-extensions"
          ac_add_options --disable-default-browser-agent
          ac_add_options --disable-geckodriver
          ac_add_options --disable-webrtc
          ac_add_options --enable-proxy-bypass-protection
          ac_add_options --disable-warnings-as-errors
          mk_add_options "export WIDL_TIME_OVERRIDE=0" 
          EOF
          
      - name: Run fxc2 build.
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        run: |
          git clone --depth 1 https://github.com/mozilla/fxc2.git
          cd fxc2 && clang++ -v -target x86_64-w64-mingw32 -static -pthread -I/usr/lib/gcc/x86_64-w64-mingw32/10-posix/include/c++ -I/usr/lib/gcc/x86_64-w64-mingw32/10-posix/include/c++/x86_64-w64-mingw32 -L/usr/lib/gcc/x86_64-w64-mingw32/10-posix -L/usr/x86_64-w64-mingw32/lib -L/usr/lib/gcc-cross/x86_64-linux-gnu/12 fxc2.cpp -ofxc2.exe && \
          sudo cp -v fxc2.exe /usr/local/bin/
          sudo cp -v dll/d3dcompiler_47_32.dll /usr/local/bin/d3dcompiler_47.dll
                              
      - name: Run Windows build script
        if: ${{ (github.event.inputs.job == github.job) || (github.event.inputs.job == 'all') }}
        run: |
          cd $(ls -d gnuzilla/output/icecat-*|head -1)
          export LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/12:/usr/lib/gcc-cross/x86_64-linux-gnu/12 && \
          export MOZ_CONFIGURE_TRACE=true && \
          echo "-L/usr/x86_64-w64-mingw32/lib -lmsvcrt -lmsvcrt-os -lmingw32 -lucrtbase -lucrt" > /home/runner/clang.cfg          
          sed -i '0,/$LDFLAGS/s//& --config \/home\/runner\/clang.cfg/' build/autoconf/acgeneral.m4
          sudo mv -v /usr/bin/ld /usr/bin/ld.bak && \
          sudo ln -vs /usr/bin/x86_64-linux-gnu-ld /usr/bin/ld && \
          sed '/mach build/s/^/strace -f -t -e trace=file /' ../../data/buildscripts/build-windows.sh && \
          sed '/mach build/i.\/mach bootstrap help/' ../../data/buildscripts/build-windows.sh && \
          ../../data/buildscripts/build-windows.sh

      - uses: actions/upload-artifact@v3
        if: >-
          ${{ 
            (
              (github.event.inputs.job == github.job) ||
              (github.event.inputs.job == 'all')
            ) &&
            (success() || failure())
          }}
        with:
          name: IceConfigureLog
          path: gnuzilla/output/icecat-*/obj-windows/config.log
